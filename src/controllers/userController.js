import asyncHandler from "express-async-handler";
import {
  getUserByEmailAsync,
  insertUserAsync,
  updateUserAsync,
  getRolesAsync,
  createRoleAsync,
  deleteRoleAsync,
  updateRoleAsync,
  assignUserToRoleAsync,
  getUsersInRoleAsync,
  getRolesOfUserAsync,
  registerOrphanageAsync,
  registerUserAsync,
  verifyEmailAsync,
} from "../services/userService.js";
import {
  comparePassword,
  generateJWT,
  generatePassword,
} from "../utils/index.js";
import { unicastNotificationAsync } from "../services/notificationService.js";
import { createChannel, publishMessage } from "../lib/rabbitmq/index.js";
import { NOTIFICATION_SERVICE_BINDING_KEY } from "../config/index.js";

// @desc Auth user/ set token
// route POST /api/users/auth
// @access Public
export const authUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  // get user for email
  const results = await getUserByEmailAsync(email);

  if (results.length == 0) {
    // no user exists
    res.status(401);
    throw new Error("Invalid credentials");
  } else {
    // get user info
    const user = results[0];

    if (!user.EmailConfirmed) {
      publishMessage(await createChannel(), NOTIFICATION_SERVICE_BINDING_KEY, {
        event: "SEND_EMAIL",
        data: {
          receiverEmail: user.Email,
          subject: "Orphansafe Email Verficiation",
          emailContent: {
            body: {
              name: user.Name,
              intro: `Welcome ${user.Username}, Please verify your email: ${user.Email}`,
              action: {
                instructions:
                  `click the verify email link, and verify your email with us,
                   Your Autogenerated Password : admin123. 
                   please change the password after you logged in for the first time.`,
                button: {
                  color: "#0d8aa3",
                  text: "Verify Email",
                  link: `http://localhost:3000/api/users/verifyEmail?email=${user.Email}`,
                },
              },
              outro:
                "If you did not request a email verification, no further action is required on your part.",
            },
          },
        },
      });
      throw new Error("Email is not verfied. We have sent an Email. Please check you email!");
    }

    // match passwords
    const matched = await comparePassword(password, user.PasswordHash);

    if (!matched) {
      // incorrect passwords
      res.status(401);
      throw new Error("Invalid credentials");
    } else {
      // login success
      // create JWT and pass through cookie

      const results = await getRolesOfUserAsync(user.Id);
      const role = results[0];

      if (!role) return res.status(401).json("no roles found for user");

      generateJWT(res, {
        userId: user.Id,
        email: user.Email,
        roleId: role.Id,
        roleName: role.Name,
        orphanageId: user.OrphanageId,
      });

      await unicastNotificationAsync(
        `Sign in Successful`,
        `Your have logged in to your account ${user.Email}`,
        user.Id
      );

      return res.status(200).json({
        success: true,
        userInfo: {
          userId: user.Id,
          email: user.Email,
          roleId: role.Id,
          roleName: role.Name,
          orphanageId: user.OrphanageId,
        },
      });
    }
  }
});

// @desc Auth registration
// route POST /api/users/register
// @access Public
export const registerUser = asyncHandler(async (req, res) => {
  return res.status(201).json({
    success: true,
    userCreated: await registerUserAsync(req.body),
  });
});

// @desc Auth user logout
// route POST /api/users/logout
// @access Public
export const logoutUser = asyncHandler(async (req, res) => {
  res.cookie("jwt", "", {
    httpOnly: true,
    expires: new Date(0),
  });
  return res.status(200).json("User logged out");
});

// @desc Get user profile
// route GET /api/users/profile
// @access Private
export const getUserProfile = asyncHandler(async (req, res) => {
  const results = await getUserByIdAsync(req.query.id);
  if (!results[0]) return res.status(404).json("user not found");
  delete results[0].PasswordHash;
  return res.status(200).json(results[0]);
});

// @desc update user profile
// route PUT /api/users/profile
// @access Private
export const updateUserProfile = asyncHandler(async (req, res) => {
  const results = await updateUserAsync(req.body);
  if (!results[0]) return res.status(404).json("user not found");
  delete results[0].PasswordHash;
  return res.status(200).json(results[0]);
});

// @desc get user roles
// route GET /api/users/role
// @access Private
export const getRoles = asyncHandler(async (req, res) => {
  return res.status(200).json(await getRolesAsync());
});

// @desc create user role
// route POST /api/users/role
// @access Private
export const createRole = asyncHandler(async (req, res) => {
  return res.status(200).json(await createRoleAsync(req.body));
});

// @desc delete user role
// route DELETE /api/users/role
// @access Private
export const deleteRole = asyncHandler(async (req, res) => {
  return res.status(200).json(await deleteRoleAsync(req.body));
});

// @desc update user role
// route PUT /api/users/role
// @access Private
export const updateRole = asyncHandler(async (req, res) => {
  const results = await updateRoleAsync(req.body);
  if (results[0]) return res.status(200).json(results[0]);
  return res.status(404).json("id not found");
});

// @desc assign user to role
// route PUT /api/users/assignUserToRole
// @access Private
export const assignUserToRole = asyncHandler(async (req, res) => {
  const results = await assignUserToRoleAsync(req.body);
  return res.status(200).json(results[0]);
});

// @desc get users for role
// route PUT /api/users/assignUserToRole
// @access Private
export const getUsersInRole = asyncHandler(async (req, res) => {
  const results = await getUsersInRoleAsync(req.query.roleId);
  results.map((result) => delete result.PasswordHash);
  return res.status(200).json(results);
});

// @desc get users for role
// route PUT /api/users/assignUserToRole
// @access Private
export const getRolesOfUser = asyncHandler(async (req, res) => {
  const results = await getRolesOfUserAsync(req.query.userId);
  if (results[0]) return res.status(200).json(results[0]);
  return res.status(404).json("no roles for user");
});

// @desc register orphanage
// route POST /api/users/registerOrphanage
// @access Public
export const registerOrphanage = asyncHandler(async (req, res) => {
  const results = await registerOrphanageAsync(
    req.files,
    JSON.parse(req.body.otherInfo)
  );
  return res.status(200).json(results);
});

export const verifyEmail = asyncHandler(async (req, res) => {
  const results = await verifyEmailAsync(req.query.email);
  return res.redirect("https://orphansafe-management.ecodeit.com");
});


export const verifyEmailByCode = asyncHandler(async (req, res) => {
  const results = await verifyEmailAsync(req.query.email);
  return res.status(200).json(results)
});
